<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>ArtCat</value>
    <comment>Application display name</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>ArtCat</value>
    <comment>Application description</comment>
  </data>
  <data name="MasterDetail_NoSelection.Text" xml:space="preserve">
    <value>Select a piece from the list, or add a new one. </value>
    <comment>No selection text for MasterDetail</comment>
  </data>
  <data name="Shell_MasterDetail.Content" xml:space="preserve">
    <value>Pieces</value>
    <comment>Navigation view item name for MasterDetail</comment>
  </data>
  <data name="Shell_Main.Content" xml:space="preserve">
    <value>Sales</value>
    <comment>Navigation view item name for Main</comment>
  </data>
  <data name="ExceptionSettingsStorageExtensionsFileNameIsNullOrEmpty" xml:space="preserve">
    <value>File name is null or empty. Specify a valid file name</value>
    <comment>File name is null or empty to save file in settings storage extensions</comment>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Choose Theme</value>
    <comment>Choose theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
    <comment>Dark theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Windows default</value>
    <comment>Windows default theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
    <comment>Light theme text for Settings</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
    <comment>About this application title for Settings</comment>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>It's short for catalogue</value>
    <comment>About this application description for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Privacy Statement</value>
    <comment>Privacy Statement link content for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://YourPrivacyUrlGoesHere/</value>
    <comment>Here is your Privacy Statement url for Settings</comment>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
    <comment>Personalization text for Settings</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterValueMustBeAnEnum" xml:space="preserve">
    <value>value must be an Enum!</value>
    <comment>Value must be an Enum in enum to boolean converter</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterParameterMustBeAnEnumName" xml:space="preserve">
    <value>parameter must be an Enum name!</value>
    <comment>Parameter must be an Enum name in enum to boolean converter</comment>
  </data>
  <data name="Shell_Settings.Content" xml:space="preserve">
    <value>Settings</value>
    <comment>Navigation view item name for Settings</comment>
  </data>
  <data name="Add.Label" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="DropImageHere.Text" xml:space="preserve">
    <value>Drop images or image files here to add them!</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Name.PlaceholderText" xml:space="preserve">
    <value>Add the name for the piece here</value>
  </data>
  <data name="DateCompleted.Header" xml:space="preserve">
    <value>Date Completed</value>
  </data>
  <data name="DateOffered.Header" xml:space="preserve">
    <value>Date Originally Posted for Sale</value>
  </data>
  <data name="DateSold.Header" xml:space="preserve">
    <value>Date When Sold</value>
  </data>
  <data name="PriceOffered.Header" xml:space="preserve">
    <value>Price Originally Set</value>
  </data>
  <data name="PriceSold.Header" xml:space="preserve">
    <value>Price Sold</value>
  </data>
  <data name="DateCompleted.PlaceholderText" xml:space="preserve">
    <value>When was the piece finished?</value>
  </data>
  <data name="Delete.Label" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Select.Label" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="DateOffered.PlaceholderText" xml:space="preserve">
    <value>When was the piece put up for sale?</value>
  </data>
  <data name="DateSold.PlaceholderText" xml:space="preserve">
    <value>When was the piece sold?</value>
  </data>
  <data name="Search.Label" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="AddTextBlock.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Height.Header" xml:space="preserve">
    <value>Height (cm)</value>
  </data>
  <data name="Medium.Header" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="Width.Header" xml:space="preserve">
    <value>Width (cm)</value>
  </data>
  <data name="PieceSearch.PlaceholderText" xml:space="preserve">
    <value>Search for a piece</value>
  </data>
  <data name="EndDate.Header" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="SalesDescription.Text" xml:space="preserve">
    <value>Choose a start and end date to view the sales between those dates.</value>
  </data>
  <data name="StartDate.Header" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="AvgPrice.Text" xml:space="preserve">
    <value>Average price:</value>
  </data>
  <data name="MaxPrice.Text" xml:space="preserve">
    <value>Highest price:</value>
  </data>
  <data name="MinPrice.Text" xml:space="preserve">
    <value>Lowest price:</value>
  </data>
  <data name="NoSoldPieces.Text" xml:space="preserve">
    <value>There aren't any sold pieces to display.</value>
  </data>
  <data name="NumberSold.Text" xml:space="preserve">
    <value>Number of pieces sold:</value>
  </data>
  <data name="TotalPrice.Text" xml:space="preserve">
    <value>Total price:</value>
  </data>
  <data name="ContextMenuDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
</root>